// <auto-generated />
using System;
using IMCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMCore.Data.Migrations
{
    [DbContext(typeof(IMCoreContext))]
    [Migration("20190409144508_OrderSOMerchandise")]
    partial class OrderSOMerchandise
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview3.19153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IMCore.Domain.ActionQueue", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Data")
                        .HasColumnType("xml");

                    b.Property<DateTime?>("Expire")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Type");

                    b.HasKey("Id");

                    b.ToTable("ActionQueue");
                });

            modelBuilder.Entity("IMCore.Domain.ActionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionRequired")
                        .HasColumnType("text");

                    b.Property<string>("Cause")
                        .HasColumnType("text");

                    b.Property<bool?>("Closed");

                    b.Property<int?>("EnteredBy");

                    b.Property<int?>("InstallerError");

                    b.Property<string>("InstallerErrorText")
                        .HasMaxLength(100);

                    b.Property<int?>("LastEditedBy");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MeasureError");

                    b.Property<string>("MeasureErrorText")
                        .HasMaxLength(100);

                    b.Property<int?>("MillError");

                    b.Property<string>("MillErrorText")
                        .HasMaxLength(100);

                    b.Property<string>("Nature")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StoreError");

                    b.Property<string>("StoreErrorText")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ActionReport");
                });

            modelBuilder.Entity("IMCore.Domain.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId")
                        .HasColumnName("ActivityTypeId");

                    b.Property<int?>("ClosedById")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClosedById")
                        .HasDefaultValueSql("(null)");

                    b.Property<DateTime?>("ClosedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(null)");

                    b.Property<int?>("CreatedById")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderId")
                        .HasDefaultValueSql("((-1))");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ClosedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.ToTable("ActivityList");
                });

            modelBuilder.Entity("IMCore.Domain.ActivityData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityId");

                    b.Property<string>("Data")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityData");
                });

            modelBuilder.Entity("IMCore.Domain.ActivityPonoteMapping", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityId");

                    b.Property<int>("PonoteId")
                        .HasColumnName("PONoteId");

                    b.HasKey("ActivityId", "PonoteId");

                    b.HasIndex("PonoteId");

                    b.ToTable("ActivityPONoteMapping");
                });

            modelBuilder.Entity("IMCore.Domain.ActivityTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("RequirePermissionToView");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("IMCore.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnName("Address")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber1")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PhoneNumber2")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("State")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("IMCore.Domain.Admin", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeId");

                    b.HasKey("EmployeeId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("IMCore.Domain.BasicCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BasicLaborId");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BasicLaborId");

                    b.HasIndex("BranchId")
                        .HasName("IX_BasicCost_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_BasicCost_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_BasicCost_Store");

                    b.ToTable("BasicCost");
                });

            modelBuilder.Entity("IMCore.Domain.BasicLabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<string>("LaborDescription")
                        .HasMaxLength(255);

                    b.Property<int>("MaterialTypeId")
                        .HasColumnName("MaterialTypeId");

                    b.Property<bool?>("PrintOnWorkOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOnWorkOrder")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("Size");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("money");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnName("UnitOfMeasureId");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("BasicLabor");
                });

            modelBuilder.Entity("IMCore.Domain.BasicPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_BasicPrice_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_BasicPrice_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_BasicPrice_Store");

                    b.ToTable("BasicPrice");
                });

            modelBuilder.Entity("IMCore.Domain.BasicPricingOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasicLaborId")
                        .HasColumnName("BasicLaborId");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Retail")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id")
                        .HasName("PK_BasicPricing");

                    b.HasIndex("BasicLaborId");

                    b.HasIndex("MarketId");

                    b.HasIndex("StoreId");

                    b.ToTable("BasicPricingOld");
                });

            modelBuilder.Entity("IMCore.Domain.BasicRetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_BasicRetail_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_BasicRetail_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_BasicRetail_Store");

                    b.ToTable("BasicRetail");
                });

            modelBuilder.Entity("IMCore.Domain.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Insurance")
                        .HasColumnType("money");

                    b.Property<int>("OwnerId");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("PayDay")
                        .HasColumnType("date");

                    b.Property<string>("QbtxnId")
                        .HasColumnName("QBTxnId")
                        .HasMaxLength(50);

                    b.Property<decimal>("Retainage")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("money");

                    b.HasKey("BillId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("IMCore.Domain.BillClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<bool>("SubjectToInsurance");

                    b.Property<bool>("SubjectToRetainage");

                    b.HasKey("Id");

                    b.ToTable("BillClassification");
                });

            modelBuilder.Entity("IMCore.Domain.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackChargeOwnerId")
                        .HasColumnName("BackChargeOwnerId");

                    b.Property<int>("BillId");

                    b.Property<int?>("ChargeBackId")
                        .HasColumnName("ChargeBackId");

                    b.Property<int>("ClassificationId")
                        .HasColumnName("ClassificationId");

                    b.Property<string>("Comments")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("NoRetainage");

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("money");

                    b.Property<string>("Qbuid")
                        .HasColumnName("QBUid")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("BackChargeOwnerId");

                    b.HasIndex("BillId");

                    b.HasIndex("ChargeBackId");

                    b.HasIndex("WorkOrderId")
                        .IsUnique()
                        .HasName("AK_BillDetails_WorkOrderID")
                        .HasFilter("[WorkOrderId] IS NOT NULL");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("IMCore.Domain.Calls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<bool>("CustomerToCallBack");

                    b.Property<short>("Location");

                    b.Property<bool?>("NeedColor");

                    b.Property<bool?>("NeedDrawings");

                    b.Property<bool?>("NeedLabor");

                    b.Property<bool?>("NeedPadding");

                    b.Property<bool?>("NeedStyle");

                    b.Property<int>("OrderId");

                    b.Property<string>("Other")
                        .HasColumnType("text");

                    b.Property<bool?>("Schedule")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("ScheduledAm")
                        .HasColumnName("ScheduledAM");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<short>("SpokeWith");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.Property<short?>("Uid")
                        .HasColumnName("uid");

                    b.Property<bool?>("Unscheduled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasName("IX_CallsOrderID");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("IMCore.Domain.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CapAm")
                        .HasColumnName("CapAM");

                    b.Property<int>("CapNp")
                        .HasColumnName("CapNP");

                    b.Property<int>("CapPm")
                        .HasColumnName("CapPM");

                    b.Property<DateTime>("CapacityDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("NonWorkDay");

                    b.Property<int>("PoolId")
                        .HasColumnName("PoolId");

                    b.Property<bool?>("SendToHd")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SendToHD")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Id");

                    b.ToTable("Capacity");
                });

            modelBuilder.Entity("IMCore.Domain.CapacityPoolTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PoolType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CapacityPoolTypes");
                });

            modelBuilder.Entity("IMCore.Domain.CapacityPools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HdpoolId")
                        .IsRequired()
                        .HasColumnName("HDPoolId")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PoolName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PoolTypeId")
                        .HasColumnName("PoolTypeId");

                    b.Property<int>("VendorId")
                        .HasColumnName("VendorId");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ZoneNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CapacityPools");
                });

            modelBuilder.Entity("IMCore.Domain.ChargeBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19, 2)")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal>("AmountToSub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19, 2)")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("ApprovalNumber")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("Approved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("CostAdjustment");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<string>("OriginalPo")
                        .HasColumnName("OriginalPO")
                        .HasMaxLength(50);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("SubcontractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubcontractorId")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ChargeBacks");
                });

            modelBuilder.Entity("IMCore.Domain.CheckCBDetail", b =>
                {
                    b.Property<int>("CheckCbdetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CheckCBDetailId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(19, 2)");

                    b.Property<int>("ChargeBackId")
                        .HasColumnName("ChargeBackId");

                    b.Property<int>("CheckId")
                        .HasColumnName("CheckId");

                    b.HasKey("CheckCbdetailId");

                    b.HasIndex("ChargeBackId");

                    b.HasIndex("CheckId");

                    b.ToTable("CheckCBDetail");
                });

            modelBuilder.Entity("IMCore.Domain.CheckDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(19, 2)");

                    b.Property<int>("CheckId")
                        .HasColumnName("CheckId");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("OrderId");

                    b.ToTable("CheckDetail");
                });

            modelBuilder.Entity("IMCore.Domain.Checks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(19, 2)");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CheckNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("QbtxnId")
                        .HasColumnName("QBTxnId")
                        .HasMaxLength(50);

                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VendorId")
                        .HasDefaultValueSql("(1)");

                    b.HasKey("Id");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("IMCore.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountCoorId")
                        .HasColumnName("AccountCoorId");

                    b.Property<int?>("AccountRepId")
                        .HasColumnName("AccountRepId");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(255);

                    b.Property<int>("BranchId")
                        .HasColumnName("MarketId");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("DirectPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<string>("Extension")
                        .HasMaxLength(30);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(30);

                    b.Property<bool?>("IncludeInStatusReportAll")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<short?>("MarketNumber");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("StoreNickName")
                        .HasMaxLength(50);

                    b.Property<string>("StoreNumber")
                        .HasMaxLength(50);

                    b.Property<string>("StorePhoneNumber")
                        .HasMaxLength(30);

                    b.Property<int>("StoreTypeId")
                        .HasColumnName("StoreTypeId");

                    b.Property<int>("XmlsourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("XMLSourceId")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AccountCoorId");

                    b.HasIndex("AccountRepId");

                    b.HasIndex("BranchId");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("IMCore.Domain.ClientContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailBilling");

                    b.Property<bool>("EmailNotes");

                    b.Property<bool>("EmailStatusReport");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasMaxLength(30);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30);

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.Property<int?>("TitleId")
                        .HasColumnName("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreContacts");
                });

            modelBuilder.Entity("IMCore.Domain.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StoreTypeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Logo")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasColumnName("StoreTypeName")
                        .HasMaxLength(50);

                    b.Property<string>("Qbclass")
                        .HasColumnName("QBClass")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("StoreType");
                });

            modelBuilder.Entity("IMCore.Domain.ClientTypeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientTypeId")
                        .HasColumnName("ClientTypeId");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ReportTypeId")
                        .HasColumnName("ReportTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("ClientTypeReports");
                });

            modelBuilder.Entity("IMCore.Domain.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.Property<string>("Fax1")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("Fax2")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<byte[]>("Logo")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Phone1")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("Phone2")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("QrcodePrefix")
                        .HasColumnName("QRCodePrefix")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("TollFree")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("VendorNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.Property<byte[]>("WaiverSignature")
                        .HasColumnType("image");

                    b.Property<string>("Zip")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("IMCore.Domain.ContactTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ContactTitles");
                });

            modelBuilder.Entity("IMCore.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<int?>("AddressId")
                        .HasColumnName("AddressId");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50);

                    b.Property<string>("Directions")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255);

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("MobileNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(case when [CompanyName] IS NULL then (isnull([LastName],'')+', ')+isnull([FirstName],'') else [CompanyName] end)")
                        .HasMaxLength(102);

                    b.Property<string>("PhoneNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("QbcustomerId")
                        .HasColumnName("QBCustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('GA')")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("WorkNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ZipCode")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("FirstName", "LastName")
                        .HasName("CustomersFNameLName");

                    b.HasIndex("LastName", "FirstName")
                        .HasName("CustomersLNameFName");

                    b.HasIndex("Id", "FirstName", "LastName")
                        .HasName("CustomersIDFNameLName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IMCore.Domain.DaysOfYear", b =>
                {
                    b.Property<DateTime>("DateValue")
                        .HasColumnType("datetime");

                    b.HasKey("DateValue");

                    b.ToTable("DaysOfYear");
                });

            modelBuilder.Entity("IMCore.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("IMCore.Domain.DepartmentsContactTitles", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnName("DepartmentsId");

                    b.Property<int>("ContactTitlesId")
                        .HasColumnName("ContactTitlesId");

                    b.Property<bool?>("Required");

                    b.HasKey("DepartmentsId", "ContactTitlesId")
                        .HasName("PK_DepartmentValidContactTitles");

                    b.HasIndex("ContactTitlesId");

                    b.ToTable("DepartmentsContactTitles");
                });

            modelBuilder.Entity("IMCore.Domain.DepartmentsStoresAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltFaxNumber")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(30);

                    b.Property<int?>("DepartmentId")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(30);

                    b.Property<int?>("FaxStatusReportTo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024);

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StoreId");

                    b.ToTable("DepartmentsStoresAssignments");
                });

            modelBuilder.Entity("IMCore.Domain.DiscrepanciesPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CurrentPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValueSql("(0)");

                    b.Property<DateTime>("DateFound")
                        .HasColumnType("datetime");

                    b.Property<int>("DiscrepancyTypeId")
                        .HasColumnName("DiscrepancyTypeId");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<decimal?>("NewPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("XmlfilePath")
                        .HasColumnName("XMLFilePath")
                        .IsFixedLength(true)
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DiscrepanciesPrice");
                });

            modelBuilder.Entity("IMCore.Domain.Discrepancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentData")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("DateFound")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReviewed")
                        .HasColumnType("datetime");

                    b.Property<int?>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DetailId")
                        .HasDefaultValueSql("(null)");

                    b.Property<int?>("DiscrepancySubTypeId")
                        .HasColumnName("DiscrepancySubTypeId");

                    b.Property<int?>("DiscrepancyTypeId")
                        .HasColumnName("DiscrepancyTypeId");

                    b.Property<string>("NewData")
                        .HasMaxLength(1024);

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool?>("Reviewed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("ReviewedById")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReviewedById")
                        .HasDefaultValueSql("((-1))");

                    b.Property<string>("XmlfilePath")
                        .IsRequired()
                        .HasColumnName("XMLFilePath")
                        .IsFixedLength(true)
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DiscrepancySubTypeId");

                    b.HasIndex("DiscrepancyTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Discrepancies");
                });

            modelBuilder.Entity("IMCore.Domain.DiscrepancySubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DiscrepancySubType");
                });

            modelBuilder.Entity("IMCore.Domain.DiscrepancyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DiscrepancyType");
                });

            modelBuilder.Entity("IMCore.Domain.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("DivisionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivisionGroupId")
                        .HasDefaultValueSql("(1)");

                    b.Property<bool?>("MarkBilledWhenPaid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Name")
                        .HasColumnName("Division")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool?>("PrintStatusReport")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<int?>("VendorId")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("DivisionGroupId");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("IMCore.Domain.DivisionGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DivisionGroups");
                });

            modelBuilder.Entity("IMCore.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("PathAndFilename")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("IMCore.Domain.EmailImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailImages");
                });

            modelBuilder.Entity("IMCore.Domain.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("IMCore.Domain.EntryMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EntryMethod");
                });

            modelBuilder.Entity("IMCore.Domain.InstallCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fri")
                        .HasMaxLength(10);

                    b.Property<int?>("JobTypeId")
                        .HasColumnName("JobTypeId");

                    b.Property<string>("Mon")
                        .HasMaxLength(10);

                    b.Property<string>("Sat")
                        .HasMaxLength(10);

                    b.Property<string>("Slot")
                        .HasMaxLength(10);

                    b.Property<string>("Sun")
                        .HasMaxLength(10);

                    b.Property<string>("Thu")
                        .HasMaxLength(10);

                    b.Property<string>("Tue")
                        .HasMaxLength(10);

                    b.Property<string>("Wed")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("WeekStart")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("InstallCapacity");
                });

            modelBuilder.Entity("IMCore.Domain.InstallCapacityGrid", b =>
                {
                    b.Property<int>("RowType");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Fri")
                        .HasMaxLength(10);

                    b.Property<string>("Mon")
                        .HasMaxLength(10);

                    b.Property<string>("Sat")
                        .HasMaxLength(10);

                    b.Property<string>("Slot")
                        .HasMaxLength(10);

                    b.Property<string>("Sun")
                        .HasMaxLength(10);

                    b.Property<string>("Thu")
                        .HasMaxLength(10);

                    b.Property<string>("Tue")
                        .HasMaxLength(10);

                    b.Property<string>("Wed")
                        .HasMaxLength(10);

                    b.HasKey("RowType", "WeekStart");

                    b.ToTable("InstallCapacityGrid");
                });

            modelBuilder.Entity("IMCore.Domain.InstallationCrew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<string>("CrewName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("InstallationManager");

                    b.Property<int>("LeadId")
                        .HasColumnName("LeadId");

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LeadId");

                    b.HasIndex("OwnerId");

                    b.ToTable("InstallationCrew");
                });

            modelBuilder.Entity("IMCore.Domain.InstallationCrewType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<int>("JobTypeId")
                        .HasColumnName("JobTypeId");

                    b.Property<int?>("CrewId");

                    b.Property<int?>("MaxSizeId")
                        .HasColumnName("MaxSizeId");

                    b.Property<double?>("Rating");

                    b.HasKey("Id", "JobTypeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("InstallationCrewType");
                });

            modelBuilder.Entity("IMCore.Domain.InstallerError", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Installer Error");
                });

            modelBuilder.Entity("IMCore.Domain.InstallerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("InstallerStatus");
                });

            modelBuilder.Entity("IMCore.Domain.IssueStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IssueStatus");
                });

            modelBuilder.Entity("IMCore.Domain.IssueTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("IssueType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("IssueTypes");
                });

            modelBuilder.Entity("IMCore.Domain.Issues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUser");

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusId");

                    b.HasKey("Id");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("IMCore.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("ApplyToMinimumWO")
                        .HasColumnName("ApplyToMinimumWO");

                    b.Property<bool>("ApplyToMinimun");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("JobSize");

                    b.Property<bool>("PrintOnWorkOrder");

                    b.Property<bool>("Size");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnName("UnitOfMeasureId");

                    b.Property<string>("WorkOrderDescription")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("IMCore.Domain.ItemCosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("DivisionId")
                        .HasColumnName("DivisionId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int?>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ItemId")
                        .HasName("IX_ItemCosting_Labor");

                    b.HasIndex("MarketId")
                        .HasName("IX_ItemCosting_Branch");

                    b.HasIndex("StoreId")
                        .HasName("IX_ItemCosting_Store");

                    b.ToTable("ItemCosting");
                });

            modelBuilder.Entity("IMCore.Domain.ItemMatCosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("money");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<decimal?>("MatCost")
                        .HasColumnType("money");

                    b.Property<double?>("SalesTax");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MarketId");

                    b.HasIndex("StoreId");

                    b.ToTable("ItemMatCosting");
                });

            modelBuilder.Entity("IMCore.Domain.ItemPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int?>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .HasName("IX_ItemPricing_Labor");

                    b.HasIndex("MarketId")
                        .HasName("IX_ItemPricing_Branch");

                    b.HasIndex("StoreId")
                        .HasName("IX_ItemPricing_Store");

                    b.ToTable("ItemPricing");
                });

            modelBuilder.Entity("IMCore.Domain.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobStatusDescription")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("JobStatus");
                });

            modelBuilder.Entity("IMCore.Domain.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlwaysSkipInitialCall");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("IMCore.Domain.Jobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToId")
                        .HasColumnName("AssignedToId");

                    b.Property<int>("CreatedById")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted");

                    b.Property<decimal?>("JobSize")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("JobStatusId")
                        .HasColumnName("JobStatusId");

                    b.Property<int?>("PrimaryOrderId")
                        .HasColumnName("PrimaryOrderId");

                    b.Property<bool?>("ScheduledAm")
                        .HasColumnName("ScheduledAM");

                    b.Property<DateTime?>("ScheduledEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ScheduledStartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("PrimaryOrderId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("IMCore.Domain.LaborType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("LaborType");
                });

            modelBuilder.Entity("IMCore.Domain.Location", b =>
                {
                    b.Property<int>("Location1")
                        .HasColumnName("Location");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Location1");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("IMCore.Domain.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MarketId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("FaxNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("LabelPrinter");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("ManagerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("MarketName")
                        .HasMaxLength(40);

                    b.Property<string>("PhoneNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.Property<string>("PrinterDriver")
                        .HasMaxLength(50);

                    b.Property<string>("PrinterName")
                        .HasMaxLength(50);

                    b.Property<string>("PrinterPort")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("IMCore.Domain.Material", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Color")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool?>("Furnish")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('false')");

                    b.Property<bool>("IsPadding");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(512);

                    b.Property<string>("Sku")
                        .HasColumnName("SKU")
                        .HasMaxLength(11);

                    b.Property<string>("Style")
                        .HasMaxLength(100);

                    b.Property<int?>("SubCatId");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnName("UnitOfMeasureId");

                    b.Property<int?>("YardsPerRoll");

                    b.HasKey("CatId");

                    b.HasIndex("SubCatId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Material Catagory");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryBasicLaborMappings", b =>
                {
                    b.Property<int>("MaterialCategoryId")
                        .HasColumnName("MaterialCategoryId");

                    b.Property<int>("BasicLaborId")
                        .HasColumnName("BasicLaborId");

                    b.HasKey("MaterialCategoryId", "BasicLaborId");

                    b.HasIndex("BasicLaborId");

                    b.ToTable("MaterialCategoryBasicLaborMappings");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryItemMappings", b =>
                {
                    b.Property<int>("MaterialCategoryId")
                        .HasColumnName("MaterialCategoryId");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.HasKey("MaterialCategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("MaterialCategoryItemMappings");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryOptionsMappings", b =>
                {
                    b.Property<int>("MaterialCategoryId")
                        .HasColumnName("MaterialCategoryId");

                    b.Property<int>("OptionId")
                        .HasColumnName("OptionId");

                    b.HasKey("MaterialCategoryId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("MaterialCategoryOptionsMappings");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Freight")
                        .HasColumnType("money");

                    b.Property<int?>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<int>("MaterialCatId")
                        .HasColumnName("MaterialCatId");

                    b.Property<int?>("ProgramId")
                        .HasColumnName("ProgramId");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("money");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("MaterialCatId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StoreId");

                    b.ToTable("MaterialCost");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<int>("MaterialCatId")
                        .HasColumnName("MaterialCatId");

                    b.Property<int?>("ProgramId")
                        .HasColumnName("ProgramId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("MaterialCatId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StoreId");

                    b.ToTable("MaterialPrice");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Billable");

                    b.Property<bool>("Installable");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Material Status");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialSubCategory", b =>
                {
                    b.Property<int>("SubCatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SubCatId");

                    b.ToTable("MatSubCat");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompCalcs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Assigned");

                    b.Property<DateTime>("CalcTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("MeasureCompCalcData");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompCustomers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CrossStreet1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CrossStreet2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CrossStreetDir1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CrossStreetDir2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Pager")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("MeasureCompCustData");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalcId")
                        .HasColumnName("CalcId");

                    b.Property<int>("LineItemNumber");

                    b.Property<string>("MaterialAmount")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MaterialDescription")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MaterialType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("MaterialWidth");

                    b.Property<string>("PatternMatch")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CalcId");

                    b.ToTable("MeasureCompLineItemData");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Access")
                        .IsFixedLength(true)
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Disposal")
                        .IsFixedLength(true)
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Electricity");

                    b.Property<bool?>("Elevator");

                    b.Property<bool?>("FurnitureMoving");

                    b.Property<bool?>("Garage");

                    b.Property<bool?>("Heat");

                    b.Property<string>("MetalColor")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("NewPaint");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool?>("PavedDriveway");

                    b.Property<bool?>("Pets");

                    b.Property<bool?>("Removal");

                    b.Property<string>("SiteType")
                        .IsFixedLength(true)
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("MeasureCompOrderData");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureError", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Measure Error");
                });

            modelBuilder.Entity("IMCore.Domain.MillError", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Mill Error");
                });

            modelBuilder.Entity("IMCore.Domain.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSendToExpeditor");

                    b.Property<byte?>("DisplayOrder");

                    b.Property<bool>("EnableSchedulingInfo");

                    b.Property<string>("NoteTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("PermissionRequiredToSelect")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool>("RequireSpokeWith");

                    b.Property<bool>("ShowEmployees");

                    b.Property<bool>("ShowInList");

                    b.Property<bool>("ShowSpokeWith");

                    b.Property<bool?>("ShowStoreManagement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.HasKey("Id");

                    b.ToTable("NoteTypes");
                });

            modelBuilder.Entity("IMCore.Domain.OldCarpet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int?>("MaterialStatusId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PoNumberOriginal")
                        .HasColumnName("PoNumber_Original")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PoNumberReplacement")
                        .HasColumnName("PoNumber_Replacement")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("SoNumber")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Store")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OldCarpet");
                });

            modelBuilder.Entity("IMCore.Domain.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("ApplyToMinimum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("ApplyToMinimumWO")
                        .HasColumnName("ApplyToMinimumWO");

                    b.Property<int?>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int?>("MaterialTypeId")
                        .HasColumnName("MaterialTypeId");

                    b.Property<string>("OptionDescription")
                        .HasMaxLength(255);

                    b.Property<bool?>("PrintOnInvoice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("PrintOnWorkOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("Size");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("money");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnName("UnitOfMeasureId");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ItemId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("IMCore.Domain.OptionCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_OptionCost_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_OptionCost_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_OptionCost_Store");

                    b.ToTable("OptionCost");
                });

            modelBuilder.Entity("IMCore.Domain.OptionPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_OptionPrice_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_OptionPrice_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_OptionPrice_Store");

                    b.ToTable("OptionPrice");
                });

            modelBuilder.Entity("IMCore.Domain.OptionPricingOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<int>("OptionId")
                        .HasColumnName("OptionId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Retail")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("OptionId");

                    b.HasIndex("StoreId");

                    b.ToTable("OptionPricingOld");
                });

            modelBuilder.Entity("IMCore.Domain.OptionRetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LaborId")
                        .HasColumnName("LaborId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasName("IX_OptionRetail_Branch");

                    b.HasIndex("LaborId")
                        .HasName("IX_OptionRetail_Labor");

                    b.HasIndex("StoreId")
                        .HasName("IX_OptionRetail_Store");

                    b.ToTable("OptionRetail");
                });

            modelBuilder.Entity("IMCore.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("AddressId");

                    b.Property<int?>("AssignedToId")
                        .HasColumnName("AssignedToId");

                    b.Property<bool>("Billed");

                    b.Property<decimal>("BilledAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("BilledDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Called");

                    b.Property<bool>("Cancelled");

                    b.Property<string>("CorrelationId")
                        .HasColumnName("CorrelationId")
                        .HasMaxLength(255);

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("money");

                    b.Property<int?>("CreatedById")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<string>("CustomerOrderNumber")
                        .HasMaxLength(30);

                    b.Property<bool>("CustomerToCall");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DrawingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrawingNumber")
                        .HasColumnType("text");

                    b.Property<int?>("EnteredById")
                        .HasColumnName("EnteredById");

                    b.Property<int>("EntryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryMethodId")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Estimate");

                    b.Property<string>("FollowUpAction")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text");

                    b.Property<bool>("Invoice");

                    b.Property<int?>("JobId")
                        .HasColumnName("JobId");

                    b.Property<decimal?>("JobSize")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("JobStatusId")
                        .HasColumnName("JobStatusId");

                    b.Property<decimal?>("KeyRecAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("KeyRecDate")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyRecNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("MarkDown");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnName("MaterialTypeId");

                    b.Property<string>("NUMBER")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("NUMBER")
                        .HasComputedColumnSql("(case when [Estimate]='1' OR len([PurchaseOrderNumber])<>(8) OR [PurchaseOrderNumber] IS NULL then str([OrderID]) else [PurchaseOrderNumber] end)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("NoMinimum");

                    b.Property<string>("Notes")
                        .IsUnicode(false);

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNo")
                        .IsFixedLength(true)
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("OriginalPo")
                        .HasColumnName("OriginalPO")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool>("Paid");

                    b.Property<string>("PoStatusDesc")
                        .HasColumnName("poStatusDesc")
                        .HasMaxLength(50);

                    b.Property<int?>("PrimaryOrderId")
                        .HasColumnName("PrimaryOrderId");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<decimal>("RetailAmount")
                        .HasColumnType("money");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonId");

                    b.Property<DateTime?>("ScheduleEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ScheduleStartDate")
                        .HasColumnType("date");

                    b.Property<bool>("Scheduled");

                    b.Property<bool>("ScheduledAM")
                        .HasColumnName("ScheduledAM");

                    b.Property<int?>("ServiceLineNo");

                    b.Property<bool>("SevenDay");

                    b.Property<string>("Spnnotes")
                        .HasColumnName("SPNNotes")
                        .HasColumnType("text");

                    b.Property<int>("StoreId")
                        .HasColumnName("StoreId");

                    b.Property<DateTime?>("SvcCompleteSentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TripCharge")
                        .HasColumnType("money");

                    b.Property<int?>("VendorId")
                        .HasColumnName("VendorId");

                    b.Property<bool>("Warrenty");

                    b.Property<int>("XmlorderCostAmount")
                        .HasColumnName("XMLOrderCostAmount");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EnteredById");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("JobId")
                        .HasName("IX_Orders_Job");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PrimaryOrderId");

                    b.HasIndex("PurchaseOrderNumber")
                        .HasName("OrdersPO");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IMCore.Domain.OrderBasicLabor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasicLaborId")
                        .HasColumnName("BasicLaborId");

                    b.Property<bool>("Deleted");

                    b.Property<int>("EntryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryMethodId")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ExtendedCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [PrintOnWorkOrder]='1' then [UnitCost]*[InstallQuantity] else (0) end,(0.0)))");

                    b.Property<decimal>("ExtendedPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [PrintOnInvoice]='1' then [UnitPrice]*[InstallQuantity] else (0) end,(0.0)))");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("money");

                    b.Property<int?>("MaterialStatusId")
                        .HasColumnName("MaterialStatusId");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool?>("PrintOnInvoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("PrintOnWorkOrder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOnWorkOrder")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("InstallQuantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceLineNumber");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("UnitRetail")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BasicLaborId");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("OrderBasicLabor");
                });

            modelBuilder.Entity("IMCore.Domain.OrderCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderCustomId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomItemNumber");

                    b.Property<bool?>("Deleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("EntryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryMethodId")
                        .HasDefaultValueSql("(1)");

                    b.Property<decimal>("ExtendedCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [NotOnWorkOrder]='0' then [UnitCost]*[Quanity] else (0) end,(0.0)))");

                    b.Property<decimal>("ExtendedPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [NotOnInvoice]='0' then [UnitPrice]*[Quanity] else (0) end,(0.0)))");

                    b.Property<bool?>("NotOnInvoice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("NotOnWorkOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool>("PrintOnInvoice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(CONVERT([bit],case when [NotOnInvoice]=(1) then (0) else (1) end),(0)))");

                    b.Property<bool>("PrintOnWorkOrder")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(CONVERT([bit],case when [NotOnWorkOrder]=(1) then (0) else (1) end),(0)))");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool?>("Reviewed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubContractorId")
                        .HasColumnName("SubContractorId");

                    b.Property<bool?>("SubContractorPaid");

                    b.Property<double?>("SubContractorPay");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnName("UnitOfMeasureId");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValueSql("(0)");

                    b.Property<decimal?>("UnitRetail")
                        .HasColumnName("RetailPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SubContractorId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderCustom");
                });

            modelBuilder.Entity("IMCore.Domain.OrderDiagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DiagramDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DiagramFileName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DiagramNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDiagrams");
                });

            modelBuilder.Entity("IMCore.Domain.OrderDocument", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId");

                    b.HasKey("OrderId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("OrderDocument");
                });

            modelBuilder.Entity("IMCore.Domain.OrderOption", b =>
                {
                    b.Property<int>("OrdeOptionslId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdeOptionslId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int>("EntryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryMethodId")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ExtendedCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [PrintOnWorkOrder]='1' then [UnitCost]*[Quantity] else (0) end,(0.0)))");

                    b.Property<decimal>("ExtendedPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 8)")
                        .HasComputedColumnSql("(isnull(case when [PrintOnInvoice]='1' then [UnitPrice]*[Quantity] else (0) end,(0.0)))");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("money");

                    b.Property<int>("OptionId")
                        .HasColumnName("OptionId");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool?>("PrintOnInvoice")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("PrintOnWorkOrder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOnWorkOrder")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubContractorId")
                        .HasColumnName("SubContractorId");

                    b.Property<bool?>("SubContractorPaid");

                    b.Property<double?>("SubContractorPay");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("UnitRetail")
                        .HasColumnType("money");

                    b.HasKey("OrdeOptionslId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("OrderOption");
                });

            modelBuilder.Entity("IMCore.Domain.OrderRegMerchandise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("EntryMethodId")
                        .HasColumnName("EntryMethodId");

                    b.Property<int?>("HdlineNumber")
                        .HasColumnName("HDLineNumber");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<int?>("OriginalOrderId")
                        .HasColumnName("OriginalOrderId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Retail")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Skunumber")
                        .HasColumnName("SKUNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("StatusId")
                        .HasColumnName("StatusId");

                    b.Property<int?>("TransferredFrom");

                    b.Property<int?>("TransferredTo");

                    b.Property<int?>("Uomid")
                        .HasColumnName("UOMId");

                    b.Property<int?>("XmlstatusId")
                        .HasColumnName("XMLStatusId");

                    b.HasKey("Id");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("StatusId");

                    b.HasIndex("Uomid");

                    b.ToTable("OrderRegMerchandise");
                });

            modelBuilder.Entity("IMCore.Domain.OrderSOMerchandiseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BasicLaborId")
                        .HasColumnName("BasicLaborId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("EntryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntryMethodId")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ExpectedArrivalDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaterialStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaterialStatusId")
                        .HasDefaultValueSql("((16))");

                    b.Property<bool>("NotNeeded");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<int?>("OriginalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OriginalId")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int?>("OriginalOrderId")
                        .HasColumnName("OriginalOrderId");

                    b.Property<decimal?>("PreSplitQty")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("date");

                    b.Property<bool>("Reviewed");

                    b.Property<int?>("ReviewedById")
                        .HasColumnName("ReviewedById");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SKUNumber")
                        .HasColumnName("SKUNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("SOLineNumber")
                        .HasColumnName("SOLineNumber");

                    b.Property<int?>("SOMerLineNumber")
                        .HasColumnName("SOMerLineNumber");

                    b.Property<string>("SONumber")
                        .HasColumnName("SONumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("TransferredFrom");

                    b.Property<int?>("TransferredTo");

                    b.Property<int?>("Uomid")
                        .HasColumnName("UOMId");

                    b.Property<int?>("WillCallLineNumber");

                    b.Property<int?>("XMLStatusId")
                        .HasColumnName("XMLStatusId");

                    b.HasKey("Id");

                    b.HasIndex("EntryMethodId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SONumber")
                        .HasName("OrderSOMerchandiseDetailsSONumber");

                    b.HasIndex("Uomid");

                    b.ToTable("OrderSOMerchandise");
                });

            modelBuilder.Entity("IMCore.Domain.OrdersDeleted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Billed");

                    b.Property<decimal?>("BilledAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("BilledDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Called");

                    b.Property<bool>("Cancelled");

                    b.Property<decimal?>("CostAmount")
                        .HasColumnType("money");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("CustomerToCall");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DrawingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrawingNumber")
                        .HasColumnType("text");

                    b.Property<int?>("EnteredBy");

                    b.Property<int>("EntryMethodId")
                        .HasColumnName("EntryMethodId");

                    b.Property<string>("FollowUpAction")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text");

                    b.Property<bool>("Invoice");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnName("MaterialTypeId");

                    b.Property<bool?>("NoMinimum");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<string>("OrderNo")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("OriginalPo")
                        .HasColumnName("OriginalPO")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool>("Paid");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Scheduled");

                    b.Property<bool?>("ScheduledAm")
                        .HasColumnName("ScheduledAM");

                    b.Property<int?>("ServiceLineNo");

                    b.Property<bool>("SevenDay");

                    b.Property<int>("StoreId")
                        .HasColumnName("StoreId");

                    b.Property<decimal?>("TripCharge")
                        .HasColumnType("money");

                    b.Property<bool>("Warrenty");

                    b.HasKey("Id");

                    b.ToTable("OrdersDeleted");
                });

            modelBuilder.Entity("IMCore.Domain.PONote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("CustomerToCallBack");

                    b.Property<DateTime>("DateTimeEntered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTimeSent")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("EnteredByUserId")
                        .HasColumnName("EnteredByUserId");

                    b.Property<string>("NoteText")
                        .IsUnicode(false);

                    b.Property<int>("NoteTypeId")
                        .HasColumnName("NoteTypeId");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool>("Scheduled");

                    b.Property<bool?>("ScheduledAM")
                        .HasColumnName("ScheduledAM");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("SentViaXML")
                        .HasColumnName("SentViaXML");

                    b.Property<int>("SpokeWithId")
                        .HasColumnName("SpokeWithId");

                    b.Property<bool>("UnScheduled");

                    b.HasKey("Id");

                    b.HasIndex("EnteredByUserId");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpokeWithId");

                    b.ToTable("PONotes");
                });

            modelBuilder.Entity("IMCore.Domain.POPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeEntered")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("EnteredByUserId")
                        .HasColumnName("EnteredByUserId");

                    b.Property<string>("FilePath")
                        .HasMaxLength(50);

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("POPhotos");
                });

            modelBuilder.Entity("IMCore.Domain.Payroll", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Chargeback")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Installer")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("NoRetainage");

                    b.Property<int?>("OrderId");

                    b.Property<decimal?>("PayAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("date");

                    b.Property<string>("Ponumber")
                        .HasColumnName("PONumber")
                        .HasMaxLength(10);

                    b.Property<int?>("SubContractorId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubContractorId");

                    b.ToTable("Payroll");
                });

            modelBuilder.Entity("IMCore.Domain.PayrollMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PayrollMessages");
                });

            modelBuilder.Entity("IMCore.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("PermissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PermissionTypeId")
                        .HasDefaultValueSql("(1)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("IMCore.Domain.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PermissionType");
                });

            modelBuilder.Entity("IMCore.Domain.PhoneNumberTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("PhoneNumberTypes");
                });

            modelBuilder.Entity("IMCore.Domain.PostatusValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("POStatusValues");
                });

            modelBuilder.Entity("IMCore.Domain.PrintedPodata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateTimePrinted")
                        .HasColumnType("datetime");

                    b.Property<string>("Ponumber")
                        .HasColumnName("PONumber")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<bool?>("Printed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreId");

                    b.HasKey("Id");

                    b.ToTable("PrintedPOData");
                });

            modelBuilder.Entity("IMCore.Domain.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active");

                    b.Property<bool>("AllowMaterialStatusUpdate");

                    b.Property<double?>("CostMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.5))");

                    b.Property<bool?>("CustomCostByRetail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<double?>("CustomMultiplier");

                    b.Property<int?>("DivisionId")
                        .HasColumnName("DivisionId");

                    b.Property<bool>("Furnish");

                    b.Property<string>("Hdtype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HDType")
                        .HasDefaultValueSql("('')")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<bool>("InsuranceReplacement");

                    b.Property<int?>("JobTypeId")
                        .HasColumnName("JobTypeId");

                    b.Property<int?>("MarkDown");

                    b.Property<int?>("MarkDownMax");

                    b.Property<int?>("MarkDownMin");

                    b.Property<string>("MaterialTypeName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(((case when [HDType]='I' then 'INSTALL: ' else 'MEASURE: ' end+[SKU])+' ')+[SKUDesc])")
                        .HasMaxLength(277)
                        .IsUnicode(false);

                    b.Property<decimal?>("MinimumCost")
                        .HasColumnType("money");

                    b.Property<decimal?>("MinimumPrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("MinimumRetail")
                        .HasColumnType("money");

                    b.Property<bool?>("OnlyBasicToMinimum");

                    b.Property<string>("ShortName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Sku")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SKU")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("Skudesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SKUDesc")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("StoreTypeId")
                        .HasColumnName("StoreTypeId");

                    b.Property<double?>("TripChargeMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0.999))");

                    b.Property<bool?>("Valid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("WoodWaiver");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DivisionId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("IMCore.Domain.ProgramBranchMapping", b =>
                {
                    b.Property<int>("MaterialTypeId")
                        .HasColumnName("MaterialTypeId");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<bool>("AllowEntry");

                    b.HasKey("MaterialTypeId", "MarketId");

                    b.HasIndex("MarketId");

                    b.ToTable("MaterialTypesMarketMapping");
                });

            modelBuilder.Entity("IMCore.Domain.ProgramReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ProgramId")
                        .HasColumnName("ProgramId");

                    b.Property<int>("ReportTypeId")
                        .HasColumnName("ReportTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("ProgramReport");
                });

            modelBuilder.Entity("IMCore.Domain.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ReportType");
                });

            modelBuilder.Entity("IMCore.Domain.SPNActionQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId")
                        .HasColumnName("ActionId");

                    b.Property<string>("DataField1")
                        .HasMaxLength(50);

                    b.Property<string>("DataField2")
                        .HasMaxLength(50);

                    b.Property<string>("DataField3")
                        .HasMaxLength(50);

                    b.Property<string>("DataField4")
                        .HasMaxLength(50);

                    b.Property<bool?>("Processed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime?>("SendAfter")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("SPNActionQueue");
                });

            modelBuilder.Entity("IMCore.Domain.SPNActionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SPNActions");
                });

            modelBuilder.Entity("IMCore.Domain.ScheduleChangeReasonCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Measure");

                    b.Property<string>("ReasonText")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ScheduleChangeReasonCodes");
                });

            modelBuilder.Entity("IMCore.Domain.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("IMCore.Domain.Sodocument", b =>
                {
                    b.Property<int>("Soid")
                        .HasColumnName("SOId");

                    b.Property<int>("DocumentId")
                        .HasColumnName("Id");

                    b.HasKey("Soid", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("SODocument");
                });

            modelBuilder.Entity("IMCore.Domain.SosidocumentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SOSIDocumentTypes");
                });

            modelBuilder.Entity("IMCore.Domain.SosioutgoingDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datafield1")
                        .HasMaxLength(50);

                    b.Property<string>("Datafield2")
                        .HasMaxLength(50);

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("DocumentTypeId");

                    b.Property<DateTime?>("SendAfter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(null)");

                    b.HasKey("Id");

                    b.ToTable("SOSIOutgoingDocuments");
                });

            modelBuilder.Entity("IMCore.Domain.SosischeduleWillCallDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<bool?>("Scheduled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("WillCallLineNumber");

                    b.HasKey("Id");

                    b.ToTable("SOSIScheduleWillCallDocuments");
                });

            modelBuilder.Entity("IMCore.Domain.SosisentDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Acknowledged");

                    b.Property<int>("DocTypeId")
                        .HasColumnName("DocTypeId");

                    b.Property<string>("DocumentFileName")
                        .HasMaxLength(255);

                    b.Property<string>("MatchField1")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MatchField2")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MatchField3")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SOSISentDocuments");
                });

            modelBuilder.Entity("IMCore.Domain.SpnimportedPos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateImported")
                        .HasColumnType("datetime");

                    b.Property<string>("Ponumber")
                        .IsRequired()
                        .HasColumnName("PONumber")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PostatusId")
                        .HasColumnName("POStatusId");

                    b.Property<int>("StoreId")
                        .HasColumnName("StoreId");

                    b.Property<string>("XmlfilePath")
                        .IsRequired()
                        .HasColumnName("XMLFilePath")
                        .IsFixedLength(true)
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SPNImportedPOs");
                });

            modelBuilder.Entity("IMCore.Domain.SpokeWith", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<byte>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("EnableSchedulingInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("ShowAlways")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("SwText")
                        .IsRequired()
                        .HasColumnName("SW_Text")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SpokeWith");
                });

            modelBuilder.Entity("IMCore.Domain.States", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("IMCore.Domain.StoreError", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsFixedLength(true)
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Store Error");
                });

            modelBuilder.Entity("IMCore.Domain.SubContractor", b =>
                {
                    b.Property<int>("SubContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubContractorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("AssignedTo");

                    b.Property<bool>("BackgroundCheckPassed");

                    b.Property<DateTime?>("BackgroundChkDateApproved")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("BackgroundRptRequested")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("BadgeStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(null)")
                        .HasMaxLength(50);

                    b.Property<string>("CellPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<bool?>("Helper")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("HomePhoneNumber")
                        .HasMaxLength(30);

                    b.Property<decimal>("InsuranceDollarAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.0)");

                    b.Property<decimal>("InsuranceRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.0)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LiabilityInsuranceDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("LiabilityInsuranceOk")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LiabilityInsuranceOK")
                        .HasDefaultValueSql("(0)");

                    b.Property<int?>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("((isnull([LastName],'')+', ')+isnull([FirstName],''))")
                        .HasMaxLength(82);

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Pager")
                        .HasMaxLength(30);

                    b.Property<string>("PictureFilename")
                        .HasMaxLength(255);

                    b.Property<string>("QbsubContractorId")
                        .HasColumnName("QBSubContractorId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Retainage")
                        .HasColumnType("money");

                    b.Property<decimal?>("RetainageRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.1)");

                    b.Property<double?>("SavingsRate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Ssn")
                        .HasColumnName("SSN")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateId")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<DateTime?>("WorkmansCompInsuranceDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("WorkmansCompInsuranceOk")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkmansCompInsuranceOK")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("SubContractorId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MarketId");

                    b.ToTable("SubContractors");
                });

            modelBuilder.Entity("IMCore.Domain.SubContractorsDivisionAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnName("DivisionId");

                    b.Property<int>("SubContractorId")
                        .HasColumnName("SubContractorId");

                    b.Property<int?>("SubDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubDivisionId")
                        .HasDefaultValueSql("((-1))");

                    b.HasKey("Id");

                    b.ToTable("SubContractorsDivisionAssignments");
                });

            modelBuilder.Entity("IMCore.Domain.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitOfMeasureId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Divisor");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(50);

                    b.Property<string>("LongDescriptionSosi")
                        .HasColumnName("LongDescriptionSOSI")
                        .HasMaxLength(50);

                    b.Property<int?>("NumberOfDecimals");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Address1")
                        .HasMaxLength(255);

                    b.Property<string>("Address2")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(30);

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.Property<string>("PagerNumber")
                        .HasMaxLength(30);

                    b.Property<bool>("ReceiveCallNotes");

                    b.Property<string>("SMTPEmail")
                        .HasColumnName("SMTPEmail")
                        .HasMaxLength(50);

                    b.Property<string>("Ssn")
                        .HasColumnName("SSN")
                        .HasMaxLength(11);

                    b.Property<string>("State")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.Property<string>("Zip")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("IMCore.Domain.UserMarketDivisionAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnName("DivisionId");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("MarketId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMarketDivisionAssignments");
                });

            modelBuilder.Entity("IMCore.Domain.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnName("DivisionId");

                    b.Property<int>("MarketId")
                        .HasColumnName("MarketId");

                    b.Property<int>("PermissionId")
                        .HasColumnName("PermissionId");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("MarketId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("IMCore.Domain.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById")
                        .HasColumnName("AddedById");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AssignedToId")
                        .HasColumnName("AssignedToId");

                    b.Property<int?>("CompletedById")
                        .HasColumnName("CompletedById");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("JobId")
                        .HasColumnName("JobId");

                    b.Property<int?>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderId")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserTaskTypeId")
                        .HasColumnName("UserTaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CompletedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserTaskTypeId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("IMCore.Domain.UserTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int?>("Priority");

                    b.HasKey("Id");

                    b.ToTable("UserTaskTypes");
                });

            modelBuilder.Entity("IMCore.Domain.VOC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("AfterSalesSvcOverall")
                        .HasColumnName("After_Sales_Svc_Overall");

                    b.Property<short?>("ClassNbr")
                        .HasColumnName("Class_Nbr");

                    b.Property<short?>("CommunicationOverall")
                        .HasColumnName("Communication_Overall");

                    b.Property<short?>("CompleteWithinTimeframe")
                        .HasColumnName("Complete_Within_Timeframe");

                    b.Property<short?>("CorrectProject")
                        .HasColumnName("Correct_Project");

                    b.Property<short?>("DepartmentNbr")
                        .HasColumnName("Department_Nbr");

                    b.Property<string>("DivisionName")
                        .HasColumnName("Division_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FinalComments")
                        .HasColumnName("Final_Comments")
                        .IsUnicode(false);

                    b.Property<string>("GeneralComment")
                        .HasColumnName("General_Comment")
                        .IsUnicode(false);

                    b.Property<short?>("InstallerAppearance")
                        .HasColumnName("Installer_Appearance");

                    b.Property<float?>("InstallerAttributesAggregated")
                        .HasColumnName("Installer_Attributes_Aggregated");

                    b.Property<short?>("InstallerCare")
                        .HasColumnName("Installer_Care");

                    b.Property<short?>("InstallerCleanup")
                        .HasColumnName("Installer_Cleanup");

                    b.Property<short?>("InstallerCompleteOnTime")
                        .HasColumnName("Installer_Complete_On_Time");

                    b.Property<short?>("InstallerCourtesy")
                        .HasColumnName("Installer_Courtesy");

                    b.Property<short?>("InstallerInforming")
                        .HasColumnName("Installer_Informing");

                    b.Property<short?>("InstallerOnTime")
                        .HasColumnName("Installer_On_Time");

                    b.Property<string>("InstallerOtherComments")
                        .HasColumnName("Installer_Other_Comments")
                        .IsUnicode(false);

                    b.Property<short?>("InstallerOverall")
                        .HasColumnName("Installer_Overall");

                    b.Property<short?>("InstallerReviewProject")
                        .HasColumnName("Installer_Review_Project");

                    b.Property<short?>("IntrvwFiscalMonth")
                        .HasColumnName("Intrvw_Fiscal_Month");

                    b.Property<short?>("IntrvwFiscalQuarter")
                        .HasColumnName("Intrvw_Fiscal_Quarter");

                    b.Property<short?>("IntrvwFiscalWeek")
                        .HasColumnName("Intrvw_Fiscal_Week");

                    b.Property<short?>("IntrvwFiscalYear")
                        .HasColumnName("Intrvw_Fiscal_Year");

                    b.Property<short?>("IssueCommunication")
                        .HasColumnName("Issue_Communication");

                    b.Property<short?>("IssueCompletionTime")
                        .HasColumnName("Issue_Completion_Time");

                    b.Property<short?>("IssueCustomerService")
                        .HasColumnName("Issue_Customer_Service");

                    b.Property<short?>("IssueDamagedProduct")
                        .HasColumnName("Issue_Damaged_Product");

                    b.Property<short?>("IssueHandlingOverall")
                        .HasColumnName("Issue_Handling_Overall");

                    b.Property<short?>("IssueIncorrectMeasurement")
                        .HasColumnName("Issue_Incorrect_Measurement");

                    b.Property<short?>("IssueInstallerProfessionalism")
                        .HasColumnName("Issue_Installer_Professionalism");

                    b.Property<short?>("IssueMaterialQuality")
                        .HasColumnName("Issue_Material_Quality");

                    b.Property<short?>("IssueOccurred")
                        .HasColumnName("Issue_Occurred");

                    b.Property<string>("IssueOther")
                        .HasColumnName("Issue_Other")
                        .IsUnicode(false);

                    b.Property<short?>("IssuePropertyDamage")
                        .HasColumnName("Issue_Property_Damage");

                    b.Property<short?>("IssueResolved")
                        .HasColumnName("Issue_Resolved");

                    b.Property<short?>("IssueStoreSupport")
                        .HasColumnName("Issue_Store_Support");

                    b.Property<short?>("IssueWorkmanship")
                        .HasColumnName("Issue_Workmanship");

                    b.Property<DateTime?>("KeyRecDate")
                        .HasColumnName("Key_Rec_Date")
                        .HasColumnType("datetime");

                    b.Property<short?>("Loyalty");

                    b.Property<string>("MarketName")
                        .HasColumnName("Market_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("MarketNbr")
                        .HasColumnName("Market_Nbr");

                    b.Property<short?>("MeasureConsultOverall")
                        .HasColumnName("Measure_Consult_Overall");

                    b.Property<string>("MvendorName")
                        .HasColumnName("Mvendor_Name")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<int?>("MvendorNbr")
                        .HasColumnName("Mvendor_Nbr");

                    b.Property<int?>("OrderId");

                    b.Property<short?>("OverallSat")
                        .HasColumnName("Overall_Sat");

                    b.Property<int?>("PoNbr")
                        .HasColumnName("PO_Nbr");

                    b.Property<short?>("ProductOverall")
                        .HasColumnName("Product_Overall");

                    b.Property<short?>("ProjectCode")
                        .HasColumnName("Project_Code");

                    b.Property<string>("ProjectName")
                        .HasColumnName("Project_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PvendorName")
                        .HasColumnName("Pvendor_Name")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<short?>("PvendorNbr")
                        .HasColumnName("Pvendor_Nbr");

                    b.Property<long?>("ReferenceNbr")
                        .HasColumnName("Reference_Nbr");

                    b.Property<short?>("Referral");

                    b.Property<string>("RegionName")
                        .HasColumnName("Region_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short?>("ShoppingOverall")
                        .HasColumnName("Shopping_Overall");

                    b.Property<int?>("Sku")
                        .HasColumnName("SKU");

                    b.Property<short?>("StoreNbr")
                        .HasColumnName("Store_Nbr");

                    b.Property<short?>("SubclassNbr")
                        .HasColumnName("Subclass_Nbr");

                    b.Property<DateTime?>("SurveyDate")
                        .HasColumnName("Survey_Date")
                        .HasColumnType("datetime");

                    b.Property<short?>("ValueOverall")
                        .HasColumnName("Value_Overall");

                    b.Property<short?>("WorkmanshipOverall")
                        .HasColumnName("Workmanship_Overall");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("VOC");
                });

            modelBuilder.Entity("IMCore.Domain.VendorNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Hddescription")
                        .HasColumnName("HDDescription")
                        .HasMaxLength(50);

                    b.Property<bool?>("PaySubWhenPaid");

                    b.Property<string>("VendorNumber")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("VendorNumbers");
                });

            modelBuilder.Entity("IMCore.Domain.Version", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<int?>("MinimumVersionMajor");

                    b.Property<int?>("MinimumVersionMinor");

                    b.Property<int?>("VersionNo");

                    b.HasKey("Id");

                    b.ToTable("Version");
                });

            modelBuilder.Entity("IMCore.Domain.Weeks", b =>
                {
                    b.Property<int>("Weeks1")
                        .HasColumnName("Weeks");

                    b.HasKey("Weeks1");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cancel");

                    b.Property<int?>("CrewId")
                        .HasColumnName("CrewId");

                    b.Property<int?>("JobId")
                        .HasColumnName("JobId");

                    b.Property<int?>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("ScheduleEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ScheduleStartDate")
                        .HasColumnType("date");

                    b.Property<bool>("ScheduledAm")
                        .HasColumnName("ScheduledAM");

                    b.HasKey("Id");

                    b.HasIndex("CrewId")
                        .HasName("WorkOrder_Crew");

                    b.HasIndex("OrderId");

                    b.HasIndex("ScheduleStartDate")
                        .HasName("WorkOrder_StartDate");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrderDocument", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrderId");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId");

                    b.HasKey("WorkOrderId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorkOrderDocument");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrderEmails", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrderId");

                    b.Property<int>("EmailType")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Sent")
                        .HasColumnType("datetime");

                    b.HasKey("WorkOrderId", "EmailType")
                        .HasName("PK__WorkOrde__CBC1E3941E45FB72");

                    b.ToTable("WorkOrderEmails");
                });

            modelBuilder.Entity("IMCore.Domain.Xmlsources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DownloadSource")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("XMLSources");
                });

            modelBuilder.Entity("IMCore.Domain.ActionReport", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("ActionReports")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ActionReport_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.Activity", b =>
                {
                    b.HasOne("IMCore.Domain.ActivityTypes", "ActivityType")
                        .WithMany("ActivityList")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_ActivityList_ActivityTypes");

                    b.HasOne("IMCore.Domain.User", "ClosedBy")
                        .WithMany("ActivityListClosedBy")
                        .HasForeignKey("ClosedById");

                    b.HasOne("IMCore.Domain.User", "CreatedBy")
                        .WithMany("ActivityListCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ActivityList_Employees");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("ActivityList")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ActivityList_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.ActivityData", b =>
                {
                    b.HasOne("IMCore.Domain.Activity", "Activity")
                        .WithMany("ActivityData")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ActivityData_ActivityList");
                });

            modelBuilder.Entity("IMCore.Domain.ActivityPonoteMapping", b =>
                {
                    b.HasOne("IMCore.Domain.Activity", "Activity")
                        .WithMany("ActivityPonoteMapping")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ActivityPONoteMapping_ActivityList");

                    b.HasOne("IMCore.Domain.PONote", "Ponote")
                        .WithMany("ActivityPonoteMapping")
                        .HasForeignKey("PonoteId")
                        .HasConstraintName("FK_ActivityPONoteMapping_PONotes");
                });

            modelBuilder.Entity("IMCore.Domain.Admin", b =>
                {
                    b.HasOne("IMCore.Domain.User", "Employee")
                        .WithOne("Admins")
                        .HasForeignKey("IMCore.Domain.Admin", "EmployeeId")
                        .HasConstraintName("FK_Admins_Employees");
                });

            modelBuilder.Entity("IMCore.Domain.BasicCost", b =>
                {
                    b.HasOne("IMCore.Domain.BasicLabor")
                        .WithMany("Costs")
                        .HasForeignKey("BasicLaborId");

                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("Costs")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BasicCost_Market");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.BasicLabor", b =>
                {
                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("BasicLabor")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_BasicLabor_Item");

                    b.HasOne("IMCore.Domain.Program", "MaterialType")
                        .WithMany("BasicLabor")
                        .HasForeignKey("MaterialTypeId")
                        .HasConstraintName("FK_BasicLabor_MaterialType");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("BasicLabor")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_BasicLabor_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.BasicPrice", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("Prices")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BasicPrice_Market");

                    b.HasOne("IMCore.Domain.BasicLabor", "Labor")
                        .WithMany("Prices")
                        .HasForeignKey("LaborId")
                        .HasConstraintName("FK_BasicPrice_Labor");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.BasicPricingOld", b =>
                {
                    b.HasOne("IMCore.Domain.BasicLabor", "BasicLabor")
                        .WithMany("BasicPricingOld")
                        .HasForeignKey("BasicLaborId")
                        .HasConstraintName("FK_BasicPricing_BasicLabor");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("BasicPricingOld")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_BasicPricing_Market");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.BasicRetail", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("Retails")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BasicRetail_Market");

                    b.HasOne("IMCore.Domain.BasicLabor", "Labor")
                        .WithMany("Retails")
                        .HasForeignKey("LaborId")
                        .HasConstraintName("FK_BasicRetail_Labor");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.Bill", b =>
                {
                    b.HasOne("IMCore.Domain.SubContractor", "Owner")
                        .WithMany("Bill")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Bill_SubContractors");
                });

            modelBuilder.Entity("IMCore.Domain.BillDetail", b =>
                {
                    b.HasOne("IMCore.Domain.SubContractor", "BackChargeOwner")
                        .WithMany("BillDetails")
                        .HasForeignKey("BackChargeOwnerId")
                        .HasConstraintName("FK_BillDetails_InstallationCrew");

                    b.HasOne("IMCore.Domain.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .HasConstraintName("FK_BillDetails_Bill");

                    b.HasOne("IMCore.Domain.ChargeBack", "ChargeBack")
                        .WithMany("BillDetails")
                        .HasForeignKey("ChargeBackId")
                        .HasConstraintName("FK_BillDetails_ChargeBacks");

                    b.HasOne("IMCore.Domain.WorkOrder", "WorkOrder")
                        .WithOne("BillDetails")
                        .HasForeignKey("IMCore.Domain.BillDetail", "WorkOrderId")
                        .HasConstraintName("FK_BillDetails_WorkOrders");
                });

            modelBuilder.Entity("IMCore.Domain.Calls", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("Calls")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Calls_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.ChargeBack", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("ChargeBacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ChargeBacks_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.CheckCBDetail", b =>
                {
                    b.HasOne("IMCore.Domain.ChargeBack", "ChargeBack")
                        .WithMany("CheckCBDetails")
                        .HasForeignKey("ChargeBackId")
                        .HasConstraintName("FK_CheckCBDetail_ChargeBacks")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.Checks", "Check")
                        .WithMany("CheckCBDetails")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("FK_CheckCBDetail_Checks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.CheckDetail", b =>
                {
                    b.HasOne("IMCore.Domain.Checks", "Check")
                        .WithMany("CheckDetails")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("FK_CheckDetail_Checks");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("CheckDetail")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_CheckDetail_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.Client", b =>
                {
                    b.HasOne("IMCore.Domain.User", "AccountCoor")
                        .WithMany("StoresAccountCoor")
                        .HasForeignKey("AccountCoorId")
                        .HasConstraintName("FK_Stores_AccountCoor");

                    b.HasOne("IMCore.Domain.User", "AccountRep")
                        .WithMany("StoresAccountRep")
                        .HasForeignKey("AccountRepId")
                        .HasConstraintName("FK_Stores_AccountRep");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("Stores")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Stores_Market");

                    b.HasOne("IMCore.Domain.ClientType", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_Stores_StoreType");
                });

            modelBuilder.Entity("IMCore.Domain.ClientContact", b =>
                {
                    b.HasOne("IMCore.Domain.Department", "Department")
                        .WithMany("StoreContacts")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_StoreContacts_Departments");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany("StoreContacts")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreContacts_Stores");
                });

            modelBuilder.Entity("IMCore.Domain.ClientTypeReport", b =>
                {
                    b.HasOne("IMCore.Domain.ClientType", "ClientType")
                        .WithMany("ClientTypeReports")
                        .HasForeignKey("ClientTypeId")
                        .HasConstraintName("FK_ClientTypeReports_ClientType");

                    b.HasOne("IMCore.Domain.ReportType", "ReportType")
                        .WithMany("ClientTypeReports")
                        .HasForeignKey("ReportTypeId")
                        .HasConstraintName("FK_ClientTypeReports_ReportTypes");
                });

            modelBuilder.Entity("IMCore.Domain.Customer", b =>
                {
                    b.HasOne("IMCore.Domain.Address", "AddressNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Customers_Address");
                });

            modelBuilder.Entity("IMCore.Domain.DepartmentsContactTitles", b =>
                {
                    b.HasOne("IMCore.Domain.ContactTitle", "ContactTitles")
                        .WithMany("DepartmentsContactTitles")
                        .HasForeignKey("ContactTitlesId")
                        .HasConstraintName("FK_DepartmentsContactTitles_ContactTitles");

                    b.HasOne("IMCore.Domain.Department", "Departments")
                        .WithMany("DepartmentsContactTitles")
                        .HasForeignKey("DepartmentsId")
                        .HasConstraintName("FK_DepartmentsContactTitles_Departments");
                });

            modelBuilder.Entity("IMCore.Domain.DepartmentsStoresAssignments", b =>
                {
                    b.HasOne("IMCore.Domain.Department", "Department")
                        .WithMany("DepartmentsStoresAssignments")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_DepartmentsStoresAssignments_Departments");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany("DepartmentsStoresAssignments")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_DepartmentsStoresAssignments_Stores");
                });

            modelBuilder.Entity("IMCore.Domain.Discrepancy", b =>
                {
                    b.HasOne("IMCore.Domain.DiscrepancySubType", "DiscrepancySubType")
                        .WithMany()
                        .HasForeignKey("DiscrepancySubTypeId");

                    b.HasOne("IMCore.Domain.DiscrepancyType", "DiscrepancyType")
                        .WithMany("Discrepancies")
                        .HasForeignKey("DiscrepancyTypeId")
                        .HasConstraintName("FK_Discrepancies_DiscrepancyType");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("Discrepancies")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Discrepancies_Orders");

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("Discrepancies")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_Discrepancies_Employees");
                });

            modelBuilder.Entity("IMCore.Domain.Division", b =>
                {
                    b.HasOne("IMCore.Domain.DivisionGroups", "DivisionGroup")
                        .WithMany("Division")
                        .HasForeignKey("DivisionGroupId")
                        .HasConstraintName("FK_Division_DivisionGroup");
                });

            modelBuilder.Entity("IMCore.Domain.InstallationCrew", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("InstallationCrew")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_InstallationCrew_Branch");

                    b.HasOne("IMCore.Domain.SubContractor", "Lead")
                        .WithMany("InstallationCrewLead")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK_InstallationCrew_Lead");

                    b.HasOne("IMCore.Domain.SubContractor", "Owner")
                        .WithMany("InstallationCrewOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_InstallationCrew_Owner");
                });

            modelBuilder.Entity("IMCore.Domain.InstallationCrewType", b =>
                {
                    b.HasOne("IMCore.Domain.InstallationCrew", "Crew")
                        .WithMany("InstallationCrewType")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_InstallationCrewType_InstallationCrew");

                    b.HasOne("IMCore.Domain.JobType", "JobType")
                        .WithMany("InstallationCrewType")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_InstallationCrewType_JobType");
                });

            modelBuilder.Entity("IMCore.Domain.Item", b =>
                {
                    b.HasOne("IMCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Item")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_Item_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.ItemCosting", b =>
                {
                    b.HasOne("IMCore.Domain.Division", "Division")
                        .WithMany("ItemCosting")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_ItemCosting_Division");

                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("Costs")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemCosting_Item");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("ItemCosting")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_ItemCosting_Market");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.ItemMatCosting", b =>
                {
                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("ItemMatCosting")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemMatCosting_Item");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("ItemMatCosting")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_ItemMatCosting_Market");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.ItemPricing", b =>
                {
                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("Prices")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemPricing_Item");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("ItemPricing")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_ItemPricing_Market");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.Jobs", b =>
                {
                    b.HasOne("IMCore.Domain.User", "AssignedTo")
                        .WithMany("JobsAssignedTo")
                        .HasForeignKey("AssignedToId")
                        .HasConstraintName("FK_Job_AssignedTo");

                    b.HasOne("IMCore.Domain.User", "CreatedBy")
                        .WithMany("JobsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Job_CreatedBy");

                    b.HasOne("IMCore.Domain.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("JobStatusId")
                        .HasConstraintName("FK_Jobs_JobStatus");

                    b.HasOne("IMCore.Domain.Order", "PrimaryOrder")
                        .WithMany("Jobs")
                        .HasForeignKey("PrimaryOrderId")
                        .HasConstraintName("FK_Jobs_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.Market", b =>
                {
                    b.HasOne("IMCore.Domain.User", "Manager")
                        .WithMany("Market")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Branch_Manager");
                });

            modelBuilder.Entity("IMCore.Domain.Material", b =>
                {
                    b.HasOne("IMCore.Domain.MaterialSubCategory", "SubCat")
                        .WithMany("MaterialCatagory")
                        .HasForeignKey("SubCatId")
                        .HasConstraintName("FK_Material Catagory_MatSubCat");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("MaterialCatagory")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_Material Catagory_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryBasicLaborMappings", b =>
                {
                    b.HasOne("IMCore.Domain.BasicLabor", "BasicLabor")
                        .WithMany("MaterialCategoryBasicLaborMappings")
                        .HasForeignKey("BasicLaborId")
                        .HasConstraintName("FK_MaterialCategoryBasicLaborMappings_BasicLabor");

                    b.HasOne("IMCore.Domain.Material", "MaterialCategory")
                        .WithMany("MaterialCategoryBasicLaborMappings")
                        .HasForeignKey("MaterialCategoryId")
                        .HasConstraintName("FK_MaterialCategoryBasicLaborMappings_MaterialCategory");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryItemMappings", b =>
                {
                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("MaterialCategoryItemMappings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_MaterilCategoryItemMappings_Item");

                    b.HasOne("IMCore.Domain.Material", "MaterialCategory")
                        .WithMany("MaterialCategoryItemMappings")
                        .HasForeignKey("MaterialCategoryId")
                        .HasConstraintName("FK_MaterilCategoryItemMappings_MaterialCategory");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCategoryOptionsMappings", b =>
                {
                    b.HasOne("IMCore.Domain.Material", "MaterialCategory")
                        .WithMany("MaterialCategoryOptionsMappings")
                        .HasForeignKey("MaterialCategoryId")
                        .HasConstraintName("FK_MaterialCategoryOptionsMappings_MaterialCategory");

                    b.HasOne("IMCore.Domain.Option", "Option")
                        .WithMany("MaterialCategoryOptionsMappings")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_MaterialCategoryOptionsMappings_Options");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialCost", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("MaterialCost")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_MaterialCost_Market");

                    b.HasOne("IMCore.Domain.Material", "MaterialCat")
                        .WithMany("MaterialCost")
                        .HasForeignKey("MaterialCatId")
                        .HasConstraintName("FK_MaterialCost_Material Catagory");

                    b.HasOne("IMCore.Domain.Program", "Program")
                        .WithMany("MaterialCost")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_MaterialCost_Program");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.MaterialPrice", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("MaterialPrice")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_MaterialPrice_Market");

                    b.HasOne("IMCore.Domain.Material", "MaterialCat")
                        .WithMany("MaterialPrice")
                        .HasForeignKey("MaterialCatId")
                        .HasConstraintName("FK_MaterialPrice_Material Catagory");

                    b.HasOne("IMCore.Domain.Program", "Program")
                        .WithMany("MaterialPrice")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_MaterialPrice_MaterialType");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompCalcs", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("MeasureCompCalcData")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_MeasureCompCalcData_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompCustomers", b =>
                {
                    b.HasOne("IMCore.Domain.Customer", "Customer")
                        .WithMany("MeasureCompCustData")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_MeasureCompCustData_Customers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompLineItem", b =>
                {
                    b.HasOne("IMCore.Domain.MeasureCompCalcs", "Calc")
                        .WithMany("MeasureCompLineItem")
                        .HasForeignKey("CalcId")
                        .HasConstraintName("FK_MeasureCompLineItemData_MeasureCompCalcData");
                });

            modelBuilder.Entity("IMCore.Domain.MeasureCompOrder", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("MeasureCompOrderData")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_MeasureCompOrderData_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.Option", b =>
                {
                    b.HasOne("IMCore.Domain.Item", "Item")
                        .WithMany("Options")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Options_Item");

                    b.HasOne("IMCore.Domain.Program", "MaterialType")
                        .WithMany("Options")
                        .HasForeignKey("MaterialTypeId")
                        .HasConstraintName("FK_Options_MaterialType");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Options")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_Options_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.OptionCost", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("OptionCost")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_OptionCost_Market");

                    b.HasOne("IMCore.Domain.Option", "Labor")
                        .WithMany("Costs")
                        .HasForeignKey("LaborId")
                        .HasConstraintName("FK_OptionCost_Labor");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.OptionPrice", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("OptionPrice")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_OptionPrice_Market");

                    b.HasOne("IMCore.Domain.Option", "Labor")
                        .WithMany("Prices")
                        .HasForeignKey("LaborId")
                        .HasConstraintName("FK_OptionPrice_Labor");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.OptionPricingOld", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("OptionPricingOld")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_OptionPricing_Market");

                    b.HasOne("IMCore.Domain.Option", "Option")
                        .WithMany("OptionPricingOld")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_OptionPricing_Options");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.OptionRetail", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Branch")
                        .WithMany("OptionRetail")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_OptionRetail_Market");

                    b.HasOne("IMCore.Domain.Option", "Labor")
                        .WithMany("Retails")
                        .HasForeignKey("LaborId")
                        .HasConstraintName("FK_OptionRetail_Labor");

                    b.HasOne("IMCore.Domain.Client", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("IMCore.Domain.Order", b =>
                {
                    b.HasOne("IMCore.Domain.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Orders_Address");

                    b.HasOne("IMCore.Domain.User", "AssignedTo")
                        .WithMany("OrdersAssignedTo")
                        .HasForeignKey("AssignedToId")
                        .HasConstraintName("FK_Orders_AssignedTo");

                    b.HasOne("IMCore.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("IMCore.Domain.User", "EnteredBy")
                        .WithMany("OrdersEnteredBy")
                        .HasForeignKey("EnteredById")
                        .HasConstraintName("FK_Orders_EnteredBy");

                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_Orders_EntryMethod");

                    b.HasOne("IMCore.Domain.JobStatus", "JobStatus")
                        .WithMany("Orders")
                        .HasForeignKey("JobStatusId")
                        .HasConstraintName("FK_Orders_JobStatus");

                    b.HasOne("IMCore.Domain.Program", "Program")
                        .WithMany("Orders")
                        .HasForeignKey("MaterialTypeId")
                        .HasConstraintName("FK_Orders_MaterialType");

                    b.HasOne("IMCore.Domain.Order", "PrimaryOrder")
                        .WithMany("AssociatedOrders")
                        .HasForeignKey("PrimaryOrderId")
                        .HasConstraintName("FK_Orders_Orders");

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrdersReviewedBy")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_Orders_ReviewedBy");

                    b.HasOne("IMCore.Domain.User", "SalesPerson")
                        .WithMany("OrdersSalesPerson")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK_Orders_SalesPerson");

                    b.HasOne("IMCore.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.OrderBasicLabor", b =>
                {
                    b.HasOne("IMCore.Domain.BasicLabor", "BasicLabor")
                        .WithMany()
                        .HasForeignKey("BasicLaborId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_OrderBasicLaborDetail_EntryMethod");

                    b.HasOne("IMCore.Domain.MaterialStatus", "MaterialStatus")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("MaterialStatusId")
                        .HasConstraintName("FK_OrderBasicLaborDetail_MaterialStatus");

                    b.HasOne("IMCore.Domain.Order")
                        .WithMany("BasicLabors")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrderBasicLaborDetails")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_OrderBasicLaborDetail_ReviewedBy");
                });

            modelBuilder.Entity("IMCore.Domain.OrderCustom", b =>
                {
                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_OrderCustomDetails_EntryMethod");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("CustomLabors")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderCustomDetails_Orders")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_OrderCustomDetails_Employees");

                    b.HasOne("IMCore.Domain.SubContractor", "SubContractor")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("SubContractorId")
                        .HasConstraintName("FK_OrderCustomDetails_SubContractor");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("OrderCustomDetails")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_OrderCustomDetails_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.OrderDiagram", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("OrderDiagrams")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDiagrams_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.OrderDocument", b =>
                {
                    b.HasOne("IMCore.Domain.Document", "Document")
                        .WithMany("OrderDocument")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_OrderDocument_Document");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("OrderDocument")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDocument_Order");
                });

            modelBuilder.Entity("IMCore.Domain.OrderOption", b =>
                {
                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderOptionsDetails")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_OrderOptionsDetails_EntryMethod");

                    b.HasOne("IMCore.Domain.Option", "Option")
                        .WithMany("OrderOptionsDetails")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_Order Options Details_Options");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("OptionalLabors")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order Options Details_Orders")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrderOptionsDetails")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_OrderOptionsDetails_Employees");
                });

            modelBuilder.Entity("IMCore.Domain.OrderRegMerchandise", b =>
                {
                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_OrderRegMerchandiseDetails_EntryMethod");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("RegMerchandises")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderRegMerchandiseDetails_Orders")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_OrderRegMerchandiseDetails_ReviewedBy");

                    b.HasOne("IMCore.Domain.MaterialStatus", "MaterialStatus")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_OrderRegMerchandiseDetails_Material Status");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "Uom")
                        .WithMany("OrderRegMerchandiseDetails")
                        .HasForeignKey("Uomid")
                        .HasConstraintName("FK_OrderRegMerchandiseDetails_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.OrderSOMerchandiseDetail", b =>
                {
                    b.HasOne("IMCore.Domain.EntryMethod", "EntryMethod")
                        .WithMany("OrderSomerchandiseDetails")
                        .HasForeignKey("EntryMethodId")
                        .HasConstraintName("FK_OrderSOMerchandiseDetails_EntryMethod");

                    b.HasOne("IMCore.Domain.MaterialStatus", "MaterialStatus")
                        .WithMany("OrderSomerchandiseDetails")
                        .HasForeignKey("MaterialStatusId")
                        .HasConstraintName("FK_OrderSOMerchandiseDetails_Material Status");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("SOMerchandises")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderSOMerchandiseDetails_Orders")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMCore.Domain.User", "ReviewedBy")
                        .WithMany("OrderSomerchandiseDetails")
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("FK_OrderSOMerchandiseDetails_ReviewedBy");

                    b.HasOne("IMCore.Domain.UnitOfMeasure", "Uom")
                        .WithMany("OrderSomerchandiseDetails")
                        .HasForeignKey("Uomid")
                        .HasConstraintName("FK_OrderSOMerchandiseDetails_UnitOfMeasure");
                });

            modelBuilder.Entity("IMCore.Domain.PONote", b =>
                {
                    b.HasOne("IMCore.Domain.User", "EnteredByUser")
                        .WithMany("Ponotes")
                        .HasForeignKey("EnteredByUserId")
                        .HasConstraintName("FK_PONote_EnteredBy");

                    b.HasOne("IMCore.Domain.NoteType", "NoteType")
                        .WithMany("Ponotes")
                        .HasForeignKey("NoteTypeId")
                        .HasConstraintName("FK_PONotes_NoteTypes");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("PONotes")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_PONotes_Orders");

                    b.HasOne("IMCore.Domain.SpokeWith", "SpokeWith")
                        .WithMany()
                        .HasForeignKey("SpokeWithId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IMCore.Domain.POPhoto", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("Pophotos")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_POPhotos_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.Payroll", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("Payroll")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Payroll_Orders");

                    b.HasOne("IMCore.Domain.SubContractor", "SubContractor")
                        .WithMany("Payroll")
                        .HasForeignKey("SubContractorId")
                        .HasConstraintName("FK_Payroll_SubContractors");
                });

            modelBuilder.Entity("IMCore.Domain.Permission", b =>
                {
                    b.HasOne("IMCore.Domain.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeId")
                        .HasConstraintName("FK_Permissions_ToTable");
                });

            modelBuilder.Entity("IMCore.Domain.Program", b =>
                {
                    b.HasOne("IMCore.Domain.Division", "Division")
                        .WithMany("MaterialType")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_MaterialType_Division");

                    b.HasOne("IMCore.Domain.JobType", "JobType")
                        .WithMany("MaterialType")
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_MaterialType_JobType");

                    b.HasOne("IMCore.Domain.ClientType", "StoreType")
                        .WithMany("MaterialType")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_MaterialType_StoreType");
                });

            modelBuilder.Entity("IMCore.Domain.ProgramBranchMapping", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("MaterialTypesMarketMapping")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_MaterialTypesMarketMapping_Market");

                    b.HasOne("IMCore.Domain.Program", "MaterialType")
                        .WithMany("MaterialTypesMarketMapping")
                        .HasForeignKey("MaterialTypeId")
                        .HasConstraintName("FK_MaterialTypesMarketMapping_MaterialType");
                });

            modelBuilder.Entity("IMCore.Domain.ProgramReport", b =>
                {
                    b.HasOne("IMCore.Domain.Program", "Program")
                        .WithMany("ProgramReport")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramReport_Program");

                    b.HasOne("IMCore.Domain.ReportType", "ReportType")
                        .WithMany("ProgramReport")
                        .HasForeignKey("ReportTypeId")
                        .HasConstraintName("FK_ProgramReport_ReportTypes");
                });

            modelBuilder.Entity("IMCore.Domain.SPNActionQueue", b =>
                {
                    b.HasOne("IMCore.Domain.SPNActionType", "Action")
                        .WithMany("SpnactionQueue")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_SPNActionQueue_SPNActions");
                });

            modelBuilder.Entity("IMCore.Domain.Sodocument", b =>
                {
                    b.HasOne("IMCore.Domain.Document", "Document")
                        .WithMany("Sodocument")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_SODocument_Document");

                    b.HasOne("IMCore.Domain.OrderSOMerchandiseDetail", "So")
                        .WithMany("Sodocument")
                        .HasForeignKey("Soid")
                        .HasConstraintName("FK_SODocument_Order");
                });

            modelBuilder.Entity("IMCore.Domain.SubContractor", b =>
                {
                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId");
                });

            modelBuilder.Entity("IMCore.Domain.UserMarketDivisionAssignments", b =>
                {
                    b.HasOne("IMCore.Domain.Division", "Division")
                        .WithMany("UserMarketDivisionAssignments")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_UserMarketDivisionAssignments_Division");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("UserMarketDivisionAssignments")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_UserMarketDivisionAssignments_Market");

                    b.HasOne("IMCore.Domain.User", "User")
                        .WithMany("UserMarketDivisionAssignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserMarketDivisionAssignments_Employees");
                });

            modelBuilder.Entity("IMCore.Domain.UserPermissions", b =>
                {
                    b.HasOne("IMCore.Domain.Division", "Division")
                        .WithMany("UserPermissions")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_UserPermissions_Division");

                    b.HasOne("IMCore.Domain.Market", "Market")
                        .WithMany("UserPermissions")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("FK_UserPermissions_Market");

                    b.HasOne("IMCore.Domain.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_UserPermissions_Permissions");

                    b.HasOne("IMCore.Domain.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPermissions_Employees");
                });

            modelBuilder.Entity("IMCore.Domain.UserTask", b =>
                {
                    b.HasOne("IMCore.Domain.User", "AddedBy")
                        .WithMany("UserTasksAddedBy")
                        .HasForeignKey("AddedById")
                        .HasConstraintName("FK_UserTasks_AddedBy");

                    b.HasOne("IMCore.Domain.User", "AssignedTo")
                        .WithMany("UserTasksAssignedTo")
                        .HasForeignKey("AssignedToId")
                        .HasConstraintName("FK_UserTasks_AssignedTo");

                    b.HasOne("IMCore.Domain.User", "CompletedBy")
                        .WithMany("UserTasksCompletedBy")
                        .HasForeignKey("CompletedById")
                        .HasConstraintName("FK_UserTasks_CompletedBy");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("UserTasks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_UserTasks_Orders");

                    b.HasOne("IMCore.Domain.UserTaskType", "UserTaskType")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserTaskTypeId")
                        .HasConstraintName("FK_UserTasks_UserTaskTypes");
                });

            modelBuilder.Entity("IMCore.Domain.VOC", b =>
                {
                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("Voc")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_VOC_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrder", b =>
                {
                    b.HasOne("IMCore.Domain.InstallationCrew", "Crew")
                        .WithMany("WorkOrder")
                        .HasForeignKey("CrewId")
                        .HasConstraintName("FK_WorkOrder_Crews");

                    b.HasOne("IMCore.Domain.Order", "Order")
                        .WithMany("WorkOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_WorkOrder_Orders");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrderDocument", b =>
                {
                    b.HasOne("IMCore.Domain.Document", "Document")
                        .WithMany("WorkOrderDocument")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_WorkOrderDocument_Document");

                    b.HasOne("IMCore.Domain.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderDocument")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_WorkOrderDocument_WorkOrder");
                });

            modelBuilder.Entity("IMCore.Domain.WorkOrderEmails", b =>
                {
                    b.HasOne("IMCore.Domain.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderEmails")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_WorkOrderEmails_ToTable");
                });
#pragma warning restore 612, 618
        }
    }
}
